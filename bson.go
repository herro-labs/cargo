package cargo

import (
	"reflect"
	"strings"
)

// BSONSupport provides utilities for working with protoc-gen-go-bson generated structs
type BSONSupport struct{}

// GetBSONTypeName converts a protobuf message type to its BSON wrapper type name
// Example: "User" -> "UserBSON", "Todo" -> "TodoBSON"
func (bs *BSONSupport) GetBSONTypeName(protoType reflect.Type) string {
	if protoType.Kind() == reflect.Ptr {
		protoType = protoType.Elem()
	}
	return protoType.Name() + "BSON"
}

// GetBSONCollectionName extracts collection name optimized for BSON types
func (bs *BSONSupport) GetBSONCollectionName(v interface{}) string {
	t := reflect.TypeOf(v)
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}

	name := strings.ToLower(t.Name())

	// Handle BSON wrapper types (e.g., "UserBSON" -> "User")
	if strings.HasSuffix(name, "bson") {
		name = strings.TrimSuffix(name, "bson")
	}

	// Handle request types
	if strings.HasSuffix(name, "request") {
		name = strings.TrimSuffix(name, "request")
	}

	return name + "s" // pluralize
}

// IsBSONType checks if a type is a BSON wrapper type generated by protoc-gen-go-bson
func (bs *BSONSupport) IsBSONType(t reflect.Type) bool {
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	return strings.HasSuffix(t.Name(), "BSON")
}

// ExtractProtoType extracts the embedded protobuf type from a BSON wrapper
// This is useful when you need to work with the original protobuf message
func (bs *BSONSupport) ExtractProtoType(bsonValue interface{}) interface{} {
	v := reflect.ValueOf(bsonValue)
	if v.Kind() == reflect.Ptr {
		v = v.Elem()
	}

	// Look for the first embedded field (the protobuf message)
	if v.NumField() > 0 {
		firstField := v.Field(0)
		if firstField.Kind() == reflect.Struct {
			return firstField.Interface()
		}
	}

	return bsonValue
}

// CreateBSONWrapper creates a BSON wrapper for a protobuf message
// This is a helper function to work with BSON types programmatically
func (bs *BSONSupport) CreateBSONWrapper(protoMsg interface{}, bsonType reflect.Type) interface{} {
	// Create new instance of BSON type
	bsonValue := reflect.New(bsonType).Elem()

	// Set the embedded protobuf message (usually the first field)
	if bsonValue.NumField() > 0 {
		protoField := bsonValue.Field(0)
		if protoField.CanSet() {
			protoField.Set(reflect.ValueOf(protoMsg).Elem())
		}
	}

	return bsonValue.Addr().Interface()
}

// Global BSON support instance
var BSON = &BSONSupport{}
